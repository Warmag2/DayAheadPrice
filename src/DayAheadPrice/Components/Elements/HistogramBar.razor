@using DayAheadPrice.Extensions
@inherits ComponentBase

@{
    var barHeightPercent = 100 * (Price - Min) / (Max - Min); // May be negative
    var gridHeightPercent = 500 / (Max - Math.Min(Min, 0.0d));

    // Number of grid lines are needed to divide the bar into 5c increments
    var gridLines = (int)Math.Round(100.0d / gridHeightPercent);
    var emptyGridLines = barHeightPercent < 100.0 - gridHeightPercent ? (int)((100 - barHeightPercent) / gridHeightPercent) : 0;
    var fullBarLines = (int)(barHeightPercent/gridHeightPercent);
    var intersectionEmptyFraction = gridHeightPercent - (barHeightPercent - fullBarLines * gridHeightPercent);
    //urp
}

<div class="fullheight histogrambar @(Time.Hour == 23 ? "dayline" : string.Empty) @(Time.Day == DateTime.Now.Day && Time != DateTime.Now.Floor() ? "currentday" : string.Empty) @(Time == DateTime.Now.Floor() ? "currenthour" : string.Empty)" style=@($"width:{(99.5/(Count+1)).ToString("#.###")}%") @onmouseenter=OnBarHover @ontouchenter=OnBarTouch>
    @if (Time == DateTime.MinValue)
    {
        @for (int ii = 0; ii < gridLines; ii++)
        {
            <div class="noprice gridhost" style=@($"height:{gridHeightPercent.ToString("#.###")}%")>
                <div class="fullwidth gridnumber">@($"{Max - (ii+1) * 5}")</div>
            </div>
        }
    }
    else {
        @for (int ii = 0; ii < emptyGridLines + 1; ii++)
        {
            @if(ii < emptyGridLines)
            {
                <div class="noprice" style=@($"height:{gridHeightPercent.ToString("#.###")}%")>
                    @if (ii == 0)
                    {
                        @(Time.Hour)
                    }
                </div>
            }
            // Case where ther is a non-full grid spot
            else
            {
                <div class="noprice" style=@($"height:{intersectionEmptyFraction.ToString("#.###")}%")>
                    @if (ii == 0)
                    {
                        @(Time.Hour)
                    }
                </div>
            }
        }

        // Full bar to bottom
        <div class="price" style=@($"height:{barHeightPercent.ToString("#.###")}%") />
    }
</div>

@code {
    //<span>@(Time == DateTime.MinValue? $"{(gridLines - 1 - ii) * 5}" : string.Empty)</span>
    [Parameter]
    public int Max { get; set; }

    [Parameter]
    public int Min { get; set; }

    [Parameter]
    public int Count { get; set; }

    [Parameter]
    public double Price { get; set; }

    [Parameter]
    public DateTime Time { get; set; }

    [Parameter]
    public EventCallback<double> PriceCallback { get; set; }

    [Parameter]
    public EventCallback<DateTime> TimeCallback { get; set; }

    private void OnBarHover(MouseEventArgs e)
    {
        HoverAct();
    }

    private void OnBarTouch(TouchEventArgs e)
    {
        HoverAct();
    }

    private void HoverAct()
    {
        if (Time == DateTime.MinValue)
        {
            return;
        }

        PriceCallback.InvokeAsync(Price);
        TimeCallback.InvokeAsync(Time);
    }
}