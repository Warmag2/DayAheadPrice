@using DayAheadPrice.Extensions
@inherits ComponentBase

@{
    var gridLines = (int)(BarHeightPercent > 100.0 ? 100.0 : BarHeightPercent / GridHeightPercent);
}

<div class="fullheight histogrambar @(_hoverActive ? "histogrambarhover" : string.Empty) @(Time.Hour == 23 ? "dayline" : string.Empty) @(Time.Day == DateTime.Now.Day && Time != DateTime.Now.Floor() ? "currentday" : string.Empty) @(Time == DateTime.Now.Floor() ? "currenthour" : string.Empty)" style=@($"width:{(100.0/(Count+1)).ToString("#.###")}%") @onmouseenter=OnBarHover @onmouseleave=OnBarNoHover @ontouchenter=OnBarTouch @ontouchleave=OnBarNoTouch>
    @for (int ii = 0; ii < gridLines; ii++)
    {
        <div class="noprice @(Time == DateTime.MinValue ? "gridhost" : string.Empty)" style=@($"height:{GridHeightPercent.ToString("#.###")}%")>
            @if (ii==0 && Time != DateTime.MinValue)
            {
                @(Time.Hour)
            }

            @if (Time == DateTime.MinValue)
            {
                <span class="fullwidth gridnumber">@($"{(gridLines - 1 - ii) * 5}")</span>
            }
        </div>
    }
    @if (Time != DateTime.MinValue && BarHeightPercent < 100.0)
    {
        <div class="noprice fullwidth" style=@($"height:{(BarHeightPercent-gridLines*GridHeightPercent).ToString("#.###")}%")>
            @if (gridLines == 0)
            {
                @(Time.Hour)
            }
        </div>
        <div class="price fullwidth" style=@($"height:{(100-BarHeightPercent).ToString("#.###")}%") />
    }
</div>

@code {
    private bool _hoverActive = false;

    //<span>@(Time == DateTime.MinValue? $"{(gridLines - 1 - ii) * 5}" : string.Empty)</span>
    [Parameter]
    public double BarHeightPercent { get; set; }

    [Parameter]
    public double GridHeightPercent { get; set; }

    [Parameter]
    public int Count { get; set; }

    [Parameter]
    public double Price { get; set; }

    [Parameter]
    public DateTime Time { get; set; }

    [Parameter]
    public EventCallback<double> PriceCallback { get; set; }

    [Parameter]
    public EventCallback<DateTime> TimeCallback { get; set; }

    private void OnBarHover(MouseEventArgs e)
    {
        HoverAct();
    }

    private void OnBarNoHover(MouseEventArgs e)
    {
        HoverNoAct();
    }

    private void OnBarTouch(TouchEventArgs e)
    {
        HoverAct();
    }

    private void OnBarNoTouch(TouchEventArgs e)
    {
        HoverNoAct();
    }

    private void HoverAct()
    {
        if (Time == DateTime.MinValue)
        {
            return;
        }

        _hoverActive = true;
        PriceCallback.InvokeAsync(Price);
        TimeCallback.InvokeAsync(Time);
    }

    private void HoverNoAct()
    {
        if (Time == DateTime.MinValue)
        {
            return;
        }
        
        _hoverActive = false;
        StateHasChanged();
    }
}