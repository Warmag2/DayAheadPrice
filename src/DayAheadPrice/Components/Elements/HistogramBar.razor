@using DayAheadPrice.Extensions
@using static DayAheadPrice.Logic.GridScaleSelector
@inherits ComponentBase

@{
    var gridScale = GetGridScale(Max, Min);
    var barHeightPercent = 100 * Price / (Max - Min); // May be negative
    var gridHeightPercent = gridScale*100 / (Max - Math.Min(Min, 0.0m));

    var gridLines = (int)Math.Round(100.0m / gridHeightPercent);
    var emptyGridLines = barHeightPercent > 0 ? Max / gridScale - (int)Math.Ceiling(barHeightPercent / gridHeightPercent) : -Min / gridScale - (int)Math.Ceiling(-barHeightPercent / gridHeightPercent);
    var fullBarLines = (int)(Math.Abs(barHeightPercent) / gridHeightPercent);
    var intersectionEmptyFraction = gridHeightPercent - (Math.Abs(barHeightPercent) - fullBarLines * gridHeightPercent) % gridHeightPercent;
    var barVisible = Price != 0;
    var mixedBlockVisible = Price % gridScale != 0;

    var eventToRun = $"setPriceData(event, '{GetPriceString()}', '{GetTimeString()}')";
}

<div class="fullheight histogrambar @(Time.Day == DateTime.Now.Day && Time != DateTime.Now.Floor() ? "currentday" : string.Empty) @(Time == DateTime.Now.Floor() ? "currenthour" : string.Empty)" style=@($"width:{(99.5/(Count+1)).ToString("#.###")}%") onmouseenter=@(eventToRun) ontouchenter=@(eventToRun)>
    @if (Time == DateTime.MinValue)
    {
        @for (int ii = 0; ii < gridLines; ii++)
        {
            <div class="noprice gridhost" style=@($"height:{gridHeightPercent.ToString("#.###")}%")>
                <div class="fullwidth gridnumber">@($"{Max - ((ii+1)*gridScale)}")</div>
            </div>
        }
    }
    else {
        @if (barHeightPercent > 0)
        {
            // Over zero
            @for (int ii = 0; ii < emptyGridLines; ii++)
            {
                <div class="noprice" style=@($"height:{gridHeightPercent.ToString("#.###")}%")>
                    @if (ii == 0)
                    {
                        @(Time.Hour)
                    }
                </div>
            }

            // Mixed block, may be height zero
            @if (mixedBlockVisible)
            {
                <div class="noprice" style=@($"height:{intersectionEmptyFraction.ToString("#.###")}%")>
                    @if (emptyGridLines == 0)
                    {
                        @(Time.Hour)
                    }
                </div>
            }

            // Full bar to zero
            @if (barVisible)
            {
                <div class="price" style=@($"height:{barHeightPercent.ToString("#.###")}%")>
                    @if (!mixedBlockVisible && emptyGridLines == 0)
                    {
                        @(Time.Hour)
                    }
                </div>
            }

            // Pad under zero
            @for (int ii = 0; ii < -Min / gridScale; ii++)
            {
                <div class="noprice" style=@($"height:{gridHeightPercent.ToString("#.###")}%") />
            }
        }
        else
        {
            // Pad over zero
            @for (int ii = 0; ii < Max / gridScale; ii++)
            {
                <div class="noprice" style=@($"height:{gridHeightPercent.ToString("#.###")}%")>
                    @if (ii == 0)
                    {
                        @(Time.Hour)
                    }
                </div>
            }

            // Under zero
            // Full bar from zero
            @if (barVisible)
            {
                <div class="price" style=@($"height:{(-barHeightPercent).ToString("#.###")}%") />
            }

            @if (mixedBlockVisible)
            {
                // Mixed block, may be height zero
                <div class="noprice" style=@($"height:{intersectionEmptyFraction.ToString("#.###")}%") />
            }

            @for (int ii = 0; ii < emptyGridLines; ii++)
            {
                <div class="noprice" style=@($"height:{gridHeightPercent.ToString("#.###")}%") />
            }
        }
    }
</div>

@code {
    [Parameter]
    public decimal Max { get; set; }

    [Parameter]
    public decimal Min { get; set; }

    [Parameter]
    public int Count { get; set; }

    [Parameter]
    public decimal Price { get; set; }

    [Parameter]
    public DateTime Time { get; set; }

    [Parameter]
    public EventCallback<decimal> PriceCallback { get; set; }

    [Parameter]
    public EventCallback<DateTime> TimeCallback { get; set; }

    /*private async Task OnBarHover(MouseEventArgs e)
    {
    await JS.InvokeAsync<string>("setPriceData", [e, GetPriceString(), GetTimeString()]);

    //HoverAct();
    }

    private async Task OnBarTouch(TouchEventArgs e)
    {
    await JS.InvokeAsync<string>("setPriceData", [e, GetPriceString(), GetTimeString()]);

    //HoverAct();
    //onclick=setPriceData(event) onmouseover=setPriceData(event) ontouchstart=setPriceData(event)
    }

    private void HoverAct()
    {
    if (Time == DateTime.MinValue)
    {
        return;
    }

    PriceCallback.InvokeAsync(Price);
    TimeCallback.InvokeAsync(Time);
    }*/

    private string GetPriceString()
    {
        return $"{Price.ToString("0.00")}c/kWh";
    }

    private string GetTimeString()
    {
        return $"{Time.Month.ToString("00")}-{Time.Day.ToString("00")} \u23F2{Time.Hour.ToString("00")} \u2014 {(Time.Hour + 1).ToString("00")}";
    }
}