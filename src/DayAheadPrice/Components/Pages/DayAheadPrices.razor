@using DayAheadPrice.Components.Elements
@using DayAheadPrice.Entities
@using DayAheadPrice.Extensions
@using DayAheadPrice.Logic
@using DayAheadPrice.Options
@using Microsoft.Extensions.Options
@using static DayAheadPrice.Logic.GridScaleSelector
@inject PriceContainer _priceContainer
@inject IOptions<PricingOptions> _pricingOptions
@inject NavigationManager _navigationManager
@page "/"
@rendermode InteractiveServer

<PageTitle>Day-ahead electricity prices (Finland)</PageTitle>

@{
    var prices = _priceList?.GetPrices(_margin, _vat);
    var printValue = prices?.TryGetValue(DateTime.Now.Floor(), out var value) == true ? value : 0m;
    // prices grouped by hour
    var priceGroups = prices?.GroupBy(p => $"{p.Key.DayOfYear}-{p.Key.Hour}").ToList();
    var pricesPerGroup = priceGroups?[0].Count();
}

<script>
    function setPriceData(event, priceString, timeString) {
    document.getElementById("TimeHeader").innerHTML = timeString;
    document.getElementById("PriceHeader").innerHTML = priceString;
    }
</script>

<div class="page">
    <div Id="TimeHeader" class="fullwidth histogramheader" onclick=messIt(event)>
        @_timeString
    </div>

    <div id="PriceHeader" class="fullwidth histogramheader" onclick=messIt(event)>
        @_priceString @($"(curr: {printValue.ToString("0.00")}c/kWh)")
    </div>

    @if (prices != null && priceGroups != null && prices.Any())
    {
        var maxPrice = prices.Max(p => p.Value);
        var minPrice = prices.Min(p => p.Value);
        minPrice = Math.Min(minPrice, 0.0m);
        var gridScale = GetGridScale((int)Math.Ceiling(maxPrice), (int)Math.Floor(minPrice));
        var ceilPrice = (int)Math.Ceiling(maxPrice / gridScale) * gridScale;
        var floorPrice = (int)Math.Floor(minPrice / gridScale) * gridScale;

        <div class="histogramcontent">
            <div style=@($"width:5rem")>
                <div class="fullwidth timeheader timeheadernoleft" style=@($"height:4rem")>
                </div>
                <div class="fullheight fullwidth">
                    <HistogramBar Max=@ceilPrice Min=@floorPrice Count=1 Price=0m Time=@DateTime.MinValue />
                </div>
            </div>

            @foreach (var priceGroup in priceGroups)
            {
                <div style=@($"width:{(100m/(priceGroups.Count)).ToString("#.###")}%")>
                    <div class="fullwidth timeheader @(priceGroup.First().Key.DayOfYear == DateTime.Now.DayOfYear ? "currentday" : string.Empty)" style=@($"height:4rem")>
                        @priceGroup.First().Key.Hour
                    </div>
                    <div class="fullheight fullwidth">
                        @foreach (var price in priceGroup)
                        {
                            <HistogramBar Max=@ceilPrice Min=@floorPrice Count=@priceGroup.Count() Price=@price.Value Resolution=@_priceList!.Resolution Time=@price.Key />
                        }
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p>
            No data to display. This might be due to a fetch error.
            <br />
            Try refreshing.
        </p>
    }
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private PriceList? _priceList = null;
    private decimal _margin;
    private decimal _vat;

    private string _timeString = string.Empty;
    private string _priceString = string.Empty;

    private void SetPriceString(decimal input)
    {
        _priceString = $"{input.ToString("0.00")}c/kWh";
    }

    private void SetTimeString(DateTime input)
    {
        var resolution = _priceList?.Resolution ?? TimeSpan.FromHours(1);
        var endTime = input + resolution;
        _timeString = $"{input.Month.ToString("00")}-{input.Day.ToString("00")} \u23F2{input.Hour.ToString("00")}:{input.Minute.ToString("00")} \u2014 {endTime.Hour.ToString("00")}:{endTime.Minute.ToString("00")}";
    }

    protected override async Task OnInitializedAsync()
    {
        if (_navigationManager.TryGetQueryString<decimal>("margin", out var margin))
        {
            _margin = margin;
        }
        else
        {
            _margin = _pricingOptions.Value.Margin;
        }

        if (_navigationManager.TryGetQueryString<decimal>("vat", out var vat))
        {
            _vat = vat;
        }
        else
        {
            _vat = _pricingOptions.Value.Vat;
        }

        _priceList = await _priceContainer.GetPriceListAsync();

        if (_priceList != null)
        {
            var prices = _priceList?.GetPrices(_margin, _vat);
            var printValue = prices?.TryGetValue(DateTime.Now.Floor(), out var value) == true ? value : 0m;
            SetPriceString(printValue);
            SetTimeString(DateTime.Now.Floor());
        }
    }
}
