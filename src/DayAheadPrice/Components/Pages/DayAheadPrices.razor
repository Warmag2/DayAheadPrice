@using DayAheadPrice.Components.Elements
@using DayAheadPrice.Entities
@using DayAheadPrice.Extensions
@using DayAheadPrice.Logic
@using DayAheadPrice.Options
@using Microsoft.Extensions.Options
@inject PriceContainer _priceContainer
@inject IOptions<PricingOptions> _pricingOptions
@inject NavigationManager _navigationManager
@page "/"
@rendermode InteractiveServer

<PageTitle>Day-ahead electricity prices (Finland)</PageTitle>

@{
    var prices = _priceList?.GetPrices(_margin, _vat);
    var printValue = prices?.TryGetValue(DateTime.Now.Floor(), out var value) == true ? value : 0d;
}

<div class="page">
    <div class="fullwidth histogramheader">
        @_timeString
    </div>

    <div class="fullwidth histogramheader">
        @_priceString @($"(curr: {printValue.ToString("0.00")}c/kWh)")
    </div>

    @if (prices != null && prices.Any())
    {
        var maxPrice = prices.Max(p => p.Value);
        var minPrice = prices.Min(p => p.Value);
        var ceilPrice = (int)Math.Ceiling(maxPrice / 5) * 5;
        var floorPrice = (int)Math.Floor(minPrice / 5) * 5;

        <div class="histogramcontent">
            <HistogramBar Max=@ceilPrice Min=@floorPrice Count=@prices.Count Price=0d Time=@DateTime.MinValue />

            @foreach (var price in prices)
            {
                <HistogramBar Max=@ceilPrice Min=@floorPrice Count=@prices.Count Price=@price.Value Time=@price.Key PriceCallback=@PriceCallback TimeCallback=@TimeCallback />
            }
        </div>
    }
    else
    {
        <p>
            No data to display. This might be due to a fetch error.
            <br />
            Try refreshing.
        </p>
    }
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private PriceList? _priceList = null;
    private decimal _margin;
    private decimal _vat;

    private string _timeString = string.Empty;
    private string _priceString = string.Empty;

    private void PriceCallback(double input)
    {
        SetPriceString(input);
        StateHasChanged();
    }

    private void TimeCallback(DateTime input)
    {
        SetTimeString(input);
        StateHasChanged();
    }

    private void SetPriceString(double input)
    {
        _priceString = $"{input.ToString("0.00")}c/kWh";
    }

    private void SetTimeString(DateTime input)
    {
        var inputh = input.AddHours(1);
        _timeString = $"{input.Month.ToString("00")}-{input.Day.ToString("00")} \u23F2{input.Hour.ToString("00")} \u2014 {inputh.Month.ToString("00")}-{inputh.Day.ToString("00")} \u23F2{inputh.Hour.ToString("00")}";
    }

    private void ValueChanged(ChangeEventArgs e)
    {
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        if (_navigationManager.TryGetQueryString<decimal>("margin", out var margin))
        {
            _margin = margin;
        }
        else
        {
            _margin = _pricingOptions.Value.Margin;
        }

        if (_navigationManager.TryGetQueryString<decimal>("vat", out var vat))
        {
            _vat = vat;
        }
        else
        {
            _vat = _pricingOptions.Value.Vat;
        }

        _priceList = await _priceContainer.GetPriceListAsync();

        if (_priceList != null)
        {
            var prices = _priceList?.GetPrices(_margin, _vat);
            var printValue = prices?.TryGetValue(DateTime.Now.Floor(), out var value) == true ? value : 0d;
            SetPriceString(printValue);
            SetTimeString(DateTime.Now.Floor());
        }
    }
}
